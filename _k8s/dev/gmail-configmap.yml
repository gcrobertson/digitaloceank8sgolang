apiVersion: v1
data:
  smtp-host: smtp.gmail.com
  smtp-port: "587"
kind: ConfigMap
metadata:
  namespace: default
  creationTimestamp: null
  name: gmail-config


# Imperative Statement
#
# > kubectl create configmap gmail-config --from-literal=smtp-port=587 --from-literal=smtp-host=smtp.gmail.com --dry-run=client -o yaml > gmail-configmap.yml

# `ConfigMap`   API object used to store non-confidential data in key-value pairs.
#               Allows decoupling of environment specific configuration from container images.

# Pods can consume ConfigMaps as:
# - Environment variables 
# - Command-line arguments
# - Configuration files in a `Volume`.

# Unlike most K8s objects that have a spec, a ConfigMap has fields instead:
# - data        [UTF-8 byte sequences]
# - binaryData  [binary data]

# The Pod and the ConfigMap must be in the same namespace.

# There are 4 different ways that you can use a ConfigMap to configure a container inside a Pod:
# 1. Inside a container command & args 
# 2. Environment variables for a container 
# 3. Add a file in read-only volume, for the application to read 
# 4. Write code to run inside the Pod that uses the Kubernetes API to read a ConfigMap